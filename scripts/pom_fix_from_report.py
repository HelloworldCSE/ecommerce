import os
import requests
import subprocess
import sys
from typing import List, Dict
from github import Github

SNYK_TOKEN = os.environ.get("SNYK_TOKEN")
MISTRAL_API_URL = "https://api.mistral.ai/v1/chat/completions"
GITHUB_TOKEN = os.environ.get("GITHUB_TOKEN")
REPO_NAME = os.environ.get("GITHUB_REPO")
POM_FILE_PATH = "pom.xml"

class MistralAPI:
    def __init__(self, api_key: str, api_url: str):
        if not api_key:
            raise ValueError("SNYK_TOKEN is missing. Ensure the SNYK_TOKEN secret is set.")
        self.api_key = api_key
        self.api_url = api_url
        self.headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }

    def ask(self, messages: List[Dict]) -> str:
        payload = {
            "model": "mistral-large-latest",
            "messages": messages,
            "temperature": 0.2,
            "max_tokens": 4096
        }
        try:
            response = requests.post(self.api_url, headers=self.headers, json=payload, timeout=120)
            response.raise_for_status()
            content = response.json()["choices"][0]["message"]["content"]
            if "```xml" in content:
                content = content.split("```xml")[1].split("```")[0]
            elif "```" in content:
                content = content.split("```")[1]
            return content.strip()
        except requests.exceptions.RequestException as e:
            print(f"Error calling Mistral API: {e}")
            return ""

def parse_snyk_report(report_content: str) -> bool:
    if "CRITICAL RISK:" in report_content or "HIGH RISK:" in report_content:
        return True
    return False

def fix_pom(api: MistralAPI, pom_content: str) -> str:
    fixer_prompt = [
        {"role": "system", "content": "You are a Maven dependency security expert. Your task is to update the `<version>` tags of dependencies in the provided `pom.xml` to their latest secure versions. You must return the ENTIRE, complete `pom.xml` file with an XML comment `<!-- [AI-FIXER]: Updated version -->` added above each changed dependency. Do not output anything else except the raw XML code."},
        {"role": "user", "content": f"Update the versions in this pom.xml to resolve known security vulnerabilities. Here is the file:\n\n```xml\n{pom_content}\n```"}
    ]
    return api.ask(fixer_prompt)

def run_command(command: list):
    try:
        subprocess.run(command, check=True, capture_output=True, text=True)
    except subprocess.CalledProcessError as e:
        print(f"Error running command: {' '.join(command)}\nStderr: {e.stderr}")
        sys.exit(1)

def create_github_pr(repo_name: str, branch_name: str, title: str, body: str):
    try:
        if not GITHUB_TOKEN:
            raise ValueError("GitHub token is missing. Ensure the GITHUB_TOKEN secret is passed to the workflow.")
        g = Github(GITHUB_TOKEN)
        repo = g.get_repo(repo_name)
        pr = repo.create_pull(
            title=title,
            body=body,
            head=branch_name,
            base=repo.default_branch
        )
        print(f"Successfully created Pull Request: {pr.html_url}")
    except Exception as e:
        print(f"Failed to create Pull Request: {e}")

def main():
    if len(sys.argv) < 2:
        print("Usage: python pom_fix_from_report.py <path_to_snyk_summary.txt>")
        sys.exit(1)

    snyk_report_path = sys.argv[1]
    if not os.path.exists(snyk_report_path):
        print(f"Error: Snyk report not found at {snyk_report_path}")
        sys.exit(1)

    with open(snyk_report_path, "r") as f:
        snyk_report_content = f.read()

    if not parse_snyk_report(snyk_report_content):
        return

    if not os.path.exists(POM_FILE_PATH):
        print(f"Error: {POM_FILE_PATH} not found.")
        sys.exit(1)

    with open(POM_FILE_PATH, "r") as f:
        original_pom_content = f.read()

    api = MistralAPI(SNYK_TOKEN, MISTRAL_API_URL)
    fixed_pom_content = fix_pom(api, original_pom_content)

    if not fixed_pom_content or fixed_pom_content.strip() == original_pom_content.strip():
        print("AI returned no changes or an empty response. Exiting.")
        return

    branch_name = "ai/fix-pom-vulnerabilities"

    run_command(["git", "checkout", "-b", branch_name])

    with open(POM_FILE_PATH, "w") as f:
        f.write(fixed_pom_content)

    commit_message = "fix(deps): AI-suggested updates to pom.xml for security"
    run_command(["git", "add", POM_FILE_PATH])
    run_command(["git", "commit", "-m", commit_message])
    run_command(["git", "push", "-u", "origin", branch_name])

    pr_title = "AI Fix: Update Maven Dependencies to Remediate Snyk Vulnerabilities"
    pr_body = (
        "This pull request was automatically generated by an AI agent in response to vulnerabilities detected by Snyk.\n\n"
        "**Snyk Report Summary:**\n"
        f"```\n{snyk_report_content}\n```\n"
        "**Action Taken:**\n"
        "The `pom.xml` has been updated with newer, secure dependency versions as suggested by the AI agent.\n\n"
        "Please review the file changes carefully to ensure compatibility and correctness before merging."
    )

    create_github_pr(REPO_NAME, branch_name, pr_title, pr_body)

if __name__ == "__main__":
    main()
