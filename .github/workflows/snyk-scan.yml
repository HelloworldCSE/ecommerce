name: Snyk Vulnerability Summary

on:
  push:
    branches: [master]  # Change to 'main' if needed

jobs:
  snyk-scan-and-summarize:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Set SNYK_TOKEN
        run: echo "SNYK_TOKEN=${{ secrets.SNYK_TOKEN }}" >> $GITHUB_ENV

      - name: Run Snyk and export report
        run: |
          snyk test --all-projects --json-file-output=snyk-results.json || true
          echo "Snyk report saved to snyk-results.json"

      - name: Save Python summarizer
        run: |
          cat << 'EOF' > summarize_snyk.py
          import json
          import os
          from abc import ABC, abstractmethod
          from typing import List, Dict, Any

          class ReportReader(ABC):
              @abstractmethod
              def read(self) -> List[Dict[str, Any]]:
                  pass

          class JSONReportReader(ReportReader):
              def __init__(self, file_path: str):
                  self.file_path = file_path

              def read(self) -> List[Dict[str, Any]]:
                  if not os.path.exists(self.file_path):
                      raise FileNotFoundError(f"File not found: {self.file_path}")
                  with open(self.file_path, 'r') as f:
                      data = json.load(f)

                  if "vulnerabilities" in data:
                      return data["vulnerabilities"]
                  elif "issues" in data and "vulnerabilities" in data["issues"]:
                      return data["issues"]["vulnerabilities"]
                  elif "runs" in data:
                      results = []
                      for run in data["runs"]:
                          results.extend(run.get("results", []))
                      return results
                  else:
                      return []

          class VulnerabilityFormatter:
              def format(self, vulnerabilities: List[Dict[str, Any]]) -> str:
                  if not vulnerabilities:
                      return "No vulnerabilities found."
                  output = [f"Total vulnerabilities found: {len(vulnerabilities)}"]
                  for i, issue in enumerate(vulnerabilities, 1):
                      package = issue.get("package", "Not available")
                      version = issue.get("version", "Not available")
                      severity = issue.get("severity", "Not available")
                      title = issue.get("title", issue.get("message", "No title"))
                      cwe = issue.get("identifiers", {}).get("CWE", ["Not available"])
                      cwe_str = ", ".join(cwe)
                      path = " > ".join(issue.get("from", ["Not available"]))
                      output.extend([
                          f"Vulnerability {i}:",
                          f"Package: {package}@{version}",
                          f"Path: {path}",
                          f"Severity: {severity}",
                          f"Title: {title}",
                          f"CWE: {cwe_str}",
                          "-" * 50
                      ])
                  return "\n".join(output)

          class VulnerabilitySummarizer:
              def __init__(self, reader: ReportReader, formatter: VulnerabilityFormatter):
                  self.reader = reader
                  self.formatter = formatter

              def summarize(self) -> str:
                  vulnerabilities = self.reader.read()
                  return self.formatter.format(vulnerabilities)

          if __name__ == "__main__":
              try:
                  reader = JSONReportReader("snyk-results.json")
                  formatter = VulnerabilityFormatter()
                  summarizer = VulnerabilitySummarizer(reader, formatter)
                  summary = summarizer.summarize()
                  with open("snyk-summary.txt", "w") as summary_file:
                      summary_file.write(summary)
                  print("Summary written to snyk-summary.txt")
              except Exception as e:
                  print(f"Error: {e}")
          EOF

      - name: Run vulnerability summarizer
        run: python summarize_snyk.py

      - name: Upload summary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: snyk-vulnerability-summary
          path: snyk-summary.txt
